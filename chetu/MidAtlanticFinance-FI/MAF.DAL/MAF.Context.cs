//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MAF.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MAFContainer : DbContext
    {
        public MAFContainer()
            : base("name=MAFContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<callcent_ag_dropped_calls> callcent_ag_dropped_calls { get; set; }
        public DbSet<callcent_ag_queuestatus> callcent_ag_queuestatus { get; set; }
        public DbSet<callcent_queuecalls> callcent_queuecalls { get; set; }
        public DbSet<calldetail> calldetails { get; set; }
        public DbSet<callhistory3> callhistory3 { get; set; }
        public DbSet<chat_dest2chat_mess> chat_dest2chat_mess { get; set; }
        public DbSet<chat_history_mess> chat_history_mess { get; set; }
        public DbSet<Dept> Depts { get; set; }
        public DbSet<Dept2ext> Dept2ext { get; set; }
        public DbSet<dn> dns { get; set; }
        public DbSet<dngrp> dngrps { get; set; }
        public DbSet<extension> extensions { get; set; }
        public DbSet<group2ext> group2ext { get; set; }
        public DbSet<group> groups { get; set; }
        public DbSet<grp> grps { get; set; }
        public DbSet<queue> queues { get; set; }
        public DbSet<queue2dn> queue2dn { get; set; }
        public DbSet<specialmenu> specialmenus { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int SP_UpdateUserReports(Nullable<int> idreport, Nullable<int> iduser)
        {
            var idreportParameter = idreport.HasValue ?
                new ObjectParameter("idreport", idreport) :
                new ObjectParameter("idreport", typeof(int));
    
            var iduserParameter = iduser.HasValue ?
                new ObjectParameter("iduser", iduser) :
                new ObjectParameter("iduser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateUserReports", idreportParameter, iduserParameter);
        }
    
        public virtual ObjectResult<SP_GetUserReports_Result> SP_GetUserReports(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserReports_Result>("SP_GetUserReports", useridParameter);
        }
    
        public virtual int SP_UpdateScheduleReport(Nullable<int> userid, Nullable<int> reportid, string emailid, string scheduletime, Nullable<int> scheduletype, Nullable<int> isSchedule)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var reportidParameter = reportid.HasValue ?
                new ObjectParameter("reportid", reportid) :
                new ObjectParameter("reportid", typeof(int));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var scheduletimeParameter = scheduletime != null ?
                new ObjectParameter("scheduletime", scheduletime) :
                new ObjectParameter("scheduletime", typeof(string));
    
            var scheduletypeParameter = scheduletype.HasValue ?
                new ObjectParameter("scheduletype", scheduletype) :
                new ObjectParameter("scheduletype", typeof(int));
    
            var isScheduleParameter = isSchedule.HasValue ?
                new ObjectParameter("IsSchedule", isSchedule) :
                new ObjectParameter("IsSchedule", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateScheduleReport", useridParameter, reportidParameter, emailidParameter, scheduletimeParameter, scheduletypeParameter, isScheduleParameter);
        }
    
        public virtual ObjectResult<SP_GetUpdateScheduleRepotList_Result> SP_GetUpdateScheduleRepotList(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUpdateScheduleRepotList_Result>("SP_GetUpdateScheduleRepotList", useridParameter);
        }
    
        public virtual ObjectResult<SP_GetUserInQueueList_Result> SP_GetUserInQueueList(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserInQueueList_Result>("SP_GetUserInQueueList", useridParameter);
        }
    
        public virtual ObjectResult<SP_GetUpdateScheduleRepotList_Result> SP_GetUpdateScheduleRepotList1(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUpdateScheduleRepotList_Result>("SP_GetUpdateScheduleRepotList1", useridParameter);
        }
    
        public virtual ObjectResult<SP_GetQueueNumbers_Result> SP_GetQueueNumbers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetQueueNumbers_Result>("SP_GetQueueNumbers");
        }
    
        public virtual int SP_InsertReportTransaction(Nullable<int> fkscheduleid, Nullable<bool> status, string description)
        {
            var fkscheduleidParameter = fkscheduleid.HasValue ?
                new ObjectParameter("fkscheduleid", fkscheduleid) :
                new ObjectParameter("fkscheduleid", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertReportTransaction", fkscheduleidParameter, statusParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<string> SP_GetExtNum(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetExtNum", useridParameter);
        }
    
        public virtual ObjectResult<SP_GetQueueList_Result> SP_GetQueueList(string queuename)
        {
            var queuenameParameter = queuename != null ?
                new ObjectParameter("Queuename", queuename) :
                new ObjectParameter("Queuename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetQueueList_Result>("SP_GetQueueList", queuenameParameter);
        }
    
        public virtual int SP_UpdateExculdeUser(Nullable<int> userid, Nullable<int> active)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateExculdeUser", useridParameter, activeParameter);
        }
    
        public virtual int SP_UpdateMUInSReport(Nullable<int> reportid, string emailid, string scheduletime, Nullable<int> scheduletype, string selectUser, string queuenum, Nullable<int> scheduleid, Nullable<int> isSchedule, Nullable<System.TimeSpan> zone1FromTime, Nullable<System.TimeSpan> zone1ToTime, Nullable<System.TimeSpan> zone2FromTime, Nullable<System.TimeSpan> zone2ToTime)
        {
            var reportidParameter = reportid.HasValue ?
                new ObjectParameter("reportid", reportid) :
                new ObjectParameter("reportid", typeof(int));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var scheduletimeParameter = scheduletime != null ?
                new ObjectParameter("scheduletime", scheduletime) :
                new ObjectParameter("scheduletime", typeof(string));
    
            var scheduletypeParameter = scheduletype.HasValue ?
                new ObjectParameter("scheduletype", scheduletype) :
                new ObjectParameter("scheduletype", typeof(int));
    
            var selectUserParameter = selectUser != null ?
                new ObjectParameter("selectUser", selectUser) :
                new ObjectParameter("selectUser", typeof(string));
    
            var queuenumParameter = queuenum != null ?
                new ObjectParameter("queuenum", queuenum) :
                new ObjectParameter("queuenum", typeof(string));
    
            var scheduleidParameter = scheduleid.HasValue ?
                new ObjectParameter("scheduleid", scheduleid) :
                new ObjectParameter("scheduleid", typeof(int));
    
            var isScheduleParameter = isSchedule.HasValue ?
                new ObjectParameter("IsSchedule", isSchedule) :
                new ObjectParameter("IsSchedule", typeof(int));
    
            var zone1FromTimeParameter = zone1FromTime.HasValue ?
                new ObjectParameter("Zone1FromTime", zone1FromTime) :
                new ObjectParameter("Zone1FromTime", typeof(System.TimeSpan));
    
            var zone1ToTimeParameter = zone1ToTime.HasValue ?
                new ObjectParameter("Zone1ToTime", zone1ToTime) :
                new ObjectParameter("Zone1ToTime", typeof(System.TimeSpan));
    
            var zone2FromTimeParameter = zone2FromTime.HasValue ?
                new ObjectParameter("Zone2FromTime", zone2FromTime) :
                new ObjectParameter("Zone2FromTime", typeof(System.TimeSpan));
    
            var zone2ToTimeParameter = zone2ToTime.HasValue ?
                new ObjectParameter("Zone2ToTime", zone2ToTime) :
                new ObjectParameter("Zone2ToTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateMUInSReport", reportidParameter, emailidParameter, scheduletimeParameter, scheduletypeParameter, selectUserParameter, queuenumParameter, scheduleidParameter, isScheduleParameter, zone1FromTimeParameter, zone1ToTimeParameter, zone2FromTimeParameter, zone2ToTimeParameter);
        }
    
        public virtual ObjectResult<spLogin_Result> spLogin(string loginUserID, string loginPassword)
        {
            var loginUserIDParameter = loginUserID != null ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(string));
    
            var loginPasswordParameter = loginPassword != null ?
                new ObjectParameter("LoginPassword", loginPassword) :
                new ObjectParameter("LoginPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLogin_Result>("spLogin", loginUserIDParameter, loginPasswordParameter);
        }
    
        public virtual ObjectResult<string> SP_UpdateUserRole(string userid, string loginid, string password, string role)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(string));
    
            var loginidParameter = loginid != null ?
                new ObjectParameter("Loginid", loginid) :
                new ObjectParameter("Loginid", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UpdateUserRole", useridParameter, loginidParameter, passwordParameter, roleParameter);
        }
    
        public virtual int spUpdatePowerZoneTime(Nullable<System.TimeSpan> zone1FromTime, Nullable<System.TimeSpan> zone1ToTime, Nullable<System.TimeSpan> zone2FromTime, Nullable<System.TimeSpan> zone2ToTime)
        {
            var zone1FromTimeParameter = zone1FromTime.HasValue ?
                new ObjectParameter("zone1FromTime", zone1FromTime) :
                new ObjectParameter("zone1FromTime", typeof(System.TimeSpan));
    
            var zone1ToTimeParameter = zone1ToTime.HasValue ?
                new ObjectParameter("zone1ToTime", zone1ToTime) :
                new ObjectParameter("zone1ToTime", typeof(System.TimeSpan));
    
            var zone2FromTimeParameter = zone2FromTime.HasValue ?
                new ObjectParameter("zone2FromTime", zone2FromTime) :
                new ObjectParameter("zone2FromTime", typeof(System.TimeSpan));
    
            var zone2ToTimeParameter = zone2ToTime.HasValue ?
                new ObjectParameter("zone2ToTime", zone2ToTime) :
                new ObjectParameter("zone2ToTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePowerZoneTime", zone1FromTimeParameter, zone1ToTimeParameter, zone2FromTimeParameter, zone2ToTimeParameter);
        }
    
        [EdmFunction("MAFContainer", "GetPowerZoneTime")]
        public virtual IQueryable<GetPowerZoneTime_Result> GetPowerZoneTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPowerZoneTime_Result>("[MAFContainer].[GetPowerZoneTime]()");
        }
    
        [EdmFunction("MAFContainer", "GetBigScreenPowerZoneTime")]
        public virtual IQueryable<GetBigScreenPowerZoneTime_Result> GetBigScreenPowerZoneTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetBigScreenPowerZoneTime_Result>("[MAFContainer].[GetBigScreenPowerZoneTime]()");
        }
    
        public virtual int spUpdateBigScreenPowerZoneTime(Nullable<System.TimeSpan> zone1FromTime, Nullable<System.TimeSpan> zone1ToTime, Nullable<System.TimeSpan> zone2FromTime, Nullable<System.TimeSpan> zone2ToTime, string header1Color, string header2Color, string row1Color, string row2Color, string fontColor, string queues)
        {
            var zone1FromTimeParameter = zone1FromTime.HasValue ?
                new ObjectParameter("zone1FromTime", zone1FromTime) :
                new ObjectParameter("zone1FromTime", typeof(System.TimeSpan));
    
            var zone1ToTimeParameter = zone1ToTime.HasValue ?
                new ObjectParameter("zone1ToTime", zone1ToTime) :
                new ObjectParameter("zone1ToTime", typeof(System.TimeSpan));
    
            var zone2FromTimeParameter = zone2FromTime.HasValue ?
                new ObjectParameter("zone2FromTime", zone2FromTime) :
                new ObjectParameter("zone2FromTime", typeof(System.TimeSpan));
    
            var zone2ToTimeParameter = zone2ToTime.HasValue ?
                new ObjectParameter("zone2ToTime", zone2ToTime) :
                new ObjectParameter("zone2ToTime", typeof(System.TimeSpan));
    
            var header1ColorParameter = header1Color != null ?
                new ObjectParameter("header1Color", header1Color) :
                new ObjectParameter("header1Color", typeof(string));
    
            var header2ColorParameter = header2Color != null ?
                new ObjectParameter("header2Color", header2Color) :
                new ObjectParameter("header2Color", typeof(string));
    
            var row1ColorParameter = row1Color != null ?
                new ObjectParameter("row1Color", row1Color) :
                new ObjectParameter("row1Color", typeof(string));
    
            var row2ColorParameter = row2Color != null ?
                new ObjectParameter("row2Color", row2Color) :
                new ObjectParameter("row2Color", typeof(string));
    
            var fontColorParameter = fontColor != null ?
                new ObjectParameter("fontColor", fontColor) :
                new ObjectParameter("fontColor", typeof(string));
    
            var queuesParameter = queues != null ?
                new ObjectParameter("queues", queues) :
                new ObjectParameter("queues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateBigScreenPowerZoneTime", zone1FromTimeParameter, zone1ToTimeParameter, zone2FromTimeParameter, zone2ToTimeParameter, header1ColorParameter, header2ColorParameter, row1ColorParameter, row2ColorParameter, fontColorParameter, queuesParameter);
        }
    
        public virtual ObjectResult<SP_GetReportList_Result> SP_GetReportList(string reportname)
        {
            var reportnameParameter = reportname != null ?
                new ObjectParameter("Reportname", reportname) :
                new ObjectParameter("Reportname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetReportList_Result>("SP_GetReportList", reportnameParameter);
        }
    
        public virtual int spResetPowerZoneColor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spResetPowerZoneColor");
        }
    
        public virtual int SP_UpdateEnableUser(Nullable<int> userid, string active)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var activeParameter = active != null ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateEnableUser", useridParameter, activeParameter);
        }
    
        public virtual int SP_UpdateUserInQueue(Nullable<int> extnum, Nullable<int> queueid, string active)
        {
            var extnumParameter = extnum.HasValue ?
                new ObjectParameter("extnum", extnum) :
                new ObjectParameter("extnum", typeof(int));
    
            var queueidParameter = queueid.HasValue ?
                new ObjectParameter("queueid", queueid) :
                new ObjectParameter("queueid", typeof(int));
    
            var activeParameter = active != null ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateUserInQueue", extnumParameter, queueidParameter, activeParameter);
        }
    
        public virtual int SP_UpdateManagerInQueue(Nullable<int> extnum, string queueid, string role)
        {
            var extnumParameter = extnum.HasValue ?
                new ObjectParameter("extnum", extnum) :
                new ObjectParameter("extnum", typeof(int));
    
            var queueidParameter = queueid != null ?
                new ObjectParameter("queueid", queueid) :
                new ObjectParameter("queueid", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateManagerInQueue", extnumParameter, queueidParameter, roleParameter);
        }
    
        public virtual ObjectResult<SP_UserRoleDetails_Result> SP_UserRoleDetails(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserRoleDetails_Result>("SP_UserRoleDetails", useridParameter);
        }
    
        public virtual ObjectResult<spGetQueues_Result> spGetQueues(Nullable<int> ext, string role)
        {
            var extParameter = ext.HasValue ?
                new ObjectParameter("Ext", ext) :
                new ObjectParameter("Ext", typeof(int));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetQueues_Result>("spGetQueues", extParameter, roleParameter);
        }
    
        public virtual ObjectResult<SP_GetUserDetails_Result> SP_GetUserDetails(string userName, string queue)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var queueParameter = queue != null ?
                new ObjectParameter("queue", queue) :
                new ObjectParameter("queue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserDetails_Result>("SP_GetUserDetails", userNameParameter, queueParameter);
        }
    
        public virtual ObjectResult<SP_GetExcludeUserByReport_Result> SP_GetExcludeUserByReport(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetExcludeUserByReport_Result>("SP_GetExcludeUserByReport", usernameParameter);
        }
    
        public virtual ObjectResult<SP_GetSchduleUserDetails_Result> SP_GetSchduleUserDetails(string userName, string abbreviation)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("abbreviation", abbreviation) :
                new ObjectParameter("abbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSchduleUserDetails_Result>("SP_GetSchduleUserDetails", userNameParameter, abbreviationParameter);
        }
    
        public virtual ObjectResult<spExtensionByQueue_Result> spExtensionByQueue(string qnum, Nullable<int> extnum)
        {
            var qnumParameter = qnum != null ?
                new ObjectParameter("qnum", qnum) :
                new ObjectParameter("qnum", typeof(string));
    
            var extnumParameter = extnum.HasValue ?
                new ObjectParameter("extnum", extnum) :
                new ObjectParameter("extnum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExtensionByQueue_Result>("spExtensionByQueue", qnumParameter, extnumParameter);
        }
    
        public virtual ObjectResult<spExtensions_Result> spExtensions(Nullable<int> ext, string role)
        {
            var extParameter = ext.HasValue ?
                new ObjectParameter("Ext", ext) :
                new ObjectParameter("Ext", typeof(int));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExtensions_Result>("spExtensions", extParameter, roleParameter);
        }
    
        public virtual ObjectResult<spExtensionsByPowerZone_Result> spExtensionsByPowerZone(Nullable<int> ext)
        {
            var extParameter = ext.HasValue ?
                new ObjectParameter("Ext", ext) :
                new ObjectParameter("Ext", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExtensionsByPowerZone_Result>("spExtensionsByPowerZone", extParameter);
        }
    
        public virtual int SP_DeleteUser(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteUser", useridParameter);
        }
    
        public virtual ObjectResult<SP_GetMUInScheduleList_Result> SP_GetMUInScheduleList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMUInScheduleList_Result>("SP_GetMUInScheduleList");
        }
    
        public virtual int SP_DeleteSchedule(Nullable<int> scheduleid)
        {
            var scheduleidParameter = scheduleid.HasValue ?
                new ObjectParameter("scheduleid", scheduleid) :
                new ObjectParameter("scheduleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteSchedule", scheduleidParameter);
        }
    
        public virtual ObjectResult<spGetRecordingPath_Result> spGetRecordingPath()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRecordingPath_Result>("spGetRecordingPath");
        }
    
        public virtual int spSetRecordingPath(string path, Nullable<int> callInterval)
        {
            var pathParameter = path != null ?
                new ObjectParameter("path", path) :
                new ObjectParameter("path", typeof(string));
    
            var callIntervalParameter = callInterval.HasValue ?
                new ObjectParameter("callInterval", callInterval) :
                new ObjectParameter("callInterval", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSetRecordingPath", pathParameter, callIntervalParameter);
        }
    }
}
